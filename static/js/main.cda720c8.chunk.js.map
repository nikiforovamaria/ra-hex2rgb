{"version":3,"sources":["components/convertHexToRgb.js","components/Form.js","components/validateHex.js","components/Converter.js","App.js","reportWebVitals.js","index.js"],"names":["convertHexToRgb","hex","bigint","parseInt","g","b","Form","props","color","onChange","length","replace","match","validateHex","className","type","name","id","defaultValue","Converter","useState","state","setState","style","backgroundColor","event","preventDefault","target","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,SAASA,EAAgBC,GACpC,IAAMC,EAASC,SAASF,EAAK,IAEvBG,EAAKF,GAAU,EAAK,IACpBG,EAAa,IAATH,EACV,MAAM,OAAN,OAHWA,GAAU,GAAM,IAG3B,aAAoBE,EAApB,aAA0BC,EAA1B,K,WCAW,SAASC,EAAKC,GAC3B,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SAETR,ECRO,SAAqBO,GAChC,GAAIA,EAAME,OAAS,EAAG,MAAO,GAC7B,IAAMT,EAAMO,EAAMG,QAAQ,IAAK,IAC/B,OAAmB,IAAfV,EAAIS,QAAgBT,EAAIW,MAAM,SACvB,uCAEAX,EDEDY,CAAYL,GAExB,OACE,uBAAMM,UAAU,OAAhB,UACE,uBACGC,KAAK,OACLC,KAAK,MACLC,GAAG,MACHC,aAAcV,EACdC,SAAUA,IACb,qBAAKQ,GAAG,MAAR,SAAejB,EAAgBC,QEftB,SAASkB,IACtB,MAA0BC,mBAAS,WAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAOA,OACE,qBAAKR,UAAU,YAAYS,MAAO,CAACC,gBAAiBH,GAApD,SACE,cAACf,EAAD,CAAME,MAAOa,EAAOZ,SAPP,SAACgB,GAChBA,EAAMC,iBACNJ,GAAS,kBAAMG,EAAME,OAAOC,cCCjBC,MANf,WACE,OACE,cAACV,EAAD,KCOWW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.cda720c8.chunk.js","sourcesContent":["export default function convertHexToRgb(hex) {\r\n    const bigint = parseInt(hex, 16);\r\n    const r = (bigint >> 16) & 255;\r\n    const g = (bigint >> 8) & 255;\r\n    const b = bigint & 255;\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport validateHex from './validateHex'\r\nimport convertHexToRgb from './convertHexToRgb'\r\n\r\nexport default function Form(props) {\r\n  const { color, onChange } = props;\r\n\r\n  const hex = validateHex(color);\r\n\r\n  return (\r\n    <form className=\"form\">\r\n      <input\r\n         type=\"text\"\r\n         name=\"hex\"\r\n         id=\"hex\" \r\n         defaultValue={color} \r\n         onChange={onChange} />\r\n      <div id=\"rgb\">{convertHexToRgb(hex)}</div>\r\n    </form>\r\n  )\r\n}\r\n\r\nForm.propTypes = {\r\n  color: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n","export default function validateHex(color) {\r\n    if (color.length < 7) return '';\r\n    const hex = color.replace('#', '');\r\n    if (hex.length !== 6 || hex.match(/[g-z]/)) {\r\n        return 'Ошибка';\r\n    } else {\r\n        return hex;\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport Form from './Form'\r\n\r\nexport default function Converter() {\r\n  const [state, setState] = useState('#ffffff');\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n    setState(() => event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"converter\" style={{backgroundColor: state}}>\r\n      <Form color={state} onChange={onChange} />\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\r\nimport Converter from './components/Converter';\r\n\r\nfunction App() {\r\n  return (\r\n    <Converter />\r\n  );\r\n}\r\n  \r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}